архитектура программы в соответствие с умозрительной моделью предметной области
организация программы которая бы отражала постоянно углублящееся понимание предмета
узнать что то новое о предметной области можно как в начале так и в конце работы над проектом, поэтому значительную роль играет рефакторинг
методологии скороспелки
14
естественная сложность предметной области. Избежать сложности нельзя, только овладеть. Решение хорошая предметно-ориентированная модель проникающая значительно глубже поверхностного взгляда на проблему
Не отделяется концепция модели от её реализации. Сложно (практически невозможно) построить полезную концептуальную модель не рассматривая вопросы её реализации
модель предметной области приносит наибольшую пользу только тогда, когда она  предоставляет  специалисту  в  этой  предметной  области  и  инженеру-разработчику единый язык, на котором они могли бы разговаривать друг с другом.
В моделях предметных областей не разделяют архитектуру и реализацию (отрицаем принцип поэтапности - "сначала строим модель, потом думаем о реализации")
Действительно грамотные модели эволюционируют  со  временем.
Даже  высококвалифицированные  специалисты  иногда обнаруживают, что наилучшие идеи приходят к ним уже после первого выпуска соответствующих программных систем.

15
Зыбка и слабоопределённая область знаний

18
целосное видение системы
Когда сложность выходит из под контроля, разработчики перестают понимать своё изделие достаточно хорошо,  для того чтобы вносить в него
исправления или расширять его возможности без особого труда и опасений.

20
акцент на способности гибко справляться с изменениями и неопределённостью
непрерывный рефакторинг это последовательность мелких изменений проектной архитектуры


28
Модель - это упрощение, интерпертация реальности при которой из явления извлекаются существенные для решения задачи аспекты, а лишние детали игнорируются
Моделирование предметной области не нацелено на создание максимально реалистичной модели
модель это дистилированное знание
дистиллирование - очищение совокупности информации от всего лишнего, выделение самой сути.

31
Разработать чёткую и ясную модель которая не оставит от сложности предмета камня на камне, что может быть интереснее

37
Установили связь между моделью между моделью и реализацией
Ввели в обиход язык основанный на модели
Разработали информоёмкую модель
Занимались дистиляцией модели

38
Финансовые аналитики обрабатывают цифры. Они перелопачивают горы подробной документации с  количественными  данными,
комбинируя  числа  так  и  эдак  в  поисках скрытого смысла, желая найти такую простую форму для представления важнейшей
су­ти информации, чтобы она ст䞮а основой для принятия финансового решения.
Бывает успех приходит в виде новоей системы абстактных понятий учитываютей все необходимые подробности.
Проделанная таким образом дистилляция даёт строго сформулированное знание.

39
наивно поверхностное понятие о предмете
По мере улучшения модели она сама становится средством организации инфмормации, которая продолжает поступать для проекта
В любом проекте существующая база знаний может дать течь. Например уволились сотрудники
Знания могут стать фрагментированными

42
Объект предметной области
придать знанию более явную форму и предоставить удобный доступ для все участников проекта
архитектура должна хорошо отображать имеющиеся знания
Архитектурный шаблон СТРАТЕГИЯ (policy). Применение мотивируется необходимостью подставлять различные правила

43
Модель предметной области и соответствующая архитектура программы помогают зафиксировать знание в доступной форме.

45
Модель - это набор понятий, вместе с названиями (терминами), отношениями и взаимосвязями
Роль всеобщего языка в проекте не всегда осознаётся, но является основополагающей

46
Проблема. Терминология повседневных дискуссий отобрвана от терминологии внедрённой в код.
Если группа разработки приложит сознательные усилия, она может сделать основой такого языка модель предметной области,
одновременно привязывая весь процесс коммуникации в группу к реализации программного продукта.
Словать единого языка состоит из имён классов и основных операций.
Язык содержит термины для обсуждения правил, явно сформулированных в модели.
Дополнением к языку служат термины из принципов высокоуровневой организации, которым подчинена модель (например карты Контекстов и т.п.)
Язык обогащается названиями шаблонов которые группа разработчиков применяет к модели.
Отношения в модели становятся комбинаторными правилами. Значения слов и фраз отображают семантику модели.

47
Часто программирование носит процедурный характер и отражает понятия модели только в неявной форме.
Изменения в языке следует принимать как изменения в модели - соответственно группа разработчиков должна вносить изменениями
в диаграммы классов, переименовывать классы и методы в исходном коде или даже изменять функции программы при изменении значения
того или иного термина.

Вначале модель может быть неклюжей и неполной.

54
Диаграммы UML хорошо передают отношения между объектами и неплохо показывают всзаимодействия. Но они не содержат концептуальные определения объектов.

55
Как только документ приобретает фиксированную форму, он часто теряет связь с динамично изменяющимися обстоятельствами проекта.

56
Работа программы однозначна и недвусмысленна, но это не делает код очевидным.
Разработчики не единственные люди кототым необходимо понимать модель.
Письменная документация должна дополнять код и устную дискуссию.

57
Хороший стиль программирования предполагает максимально понятную связь между организацией кода и его работой.
Нужно быть достаточно привередливым и педантичным, чтобы писать код, который не только делает то, что нужно, но и сообщает в письменном виде что нужно.

64
В  ходе  анализа  нужно  извлечь  из предметной  области  ее фундаментальные  понятия
и представить их понятным и выразительным способом. А в ходе проектирования архитекту­
ры следует зать набор компонентов, которые конструируются с помощью средств разработ­ки,
имеющихся в проекте, и призваны эффективно работать в той выполняющейся среде, для
которой предназначена программа, правильно решая поставленные перед ней задачи

ПРОЕКТИРОВАНИЕ ПО МОДЕЛИ предметной области (MODEL-DRIVEN DESIGN) ликви­дирует разрыв между
аналитической  моделью  и  архитектурой,  поскольку  в  ходе него ищется такая модель,
которая бы служила обеим целям. Если не вдаваться в чисто тех­нические подробности,
каждый объект в программной архитектуре играет концептуальную роль, определенную в модели.
Это требует от нас большей придирчивости в выборе модели,
поскольку она должна выполнять две совершенно различные задачи.

Всегда  существует  много  способов  абстрагирования  предметной  области,
и  всегда есть  несколько  программных архитектур,  пригодных для решения  прикладной  задачи.

Спроектируйте часть программной системы так, чтобы она отражала модель пред­метной области
самым буквальным образом - соответствие между ними должно быть очевидным.

Ключ сущности - это неизбыточный набор атрибутов,
значения которых в совокупности являются уникальными для каждого экземпляра сущности.
Неизбыточность заключается в том, что удаление любого атрибута из ключа нарушается его уникальность.
(например для fns: codeIfns, oktmo)

null = undefinded = {} = [] = {prop1: isNil, ... , propN: isNil}

empty: пустой объект или ключ сущности isBlankOnNil
1. При инициализации
    - input: !object. Cостояние первичной загрузки (отображение скелетонов)
    - input: object.
        создание списка выбора из полученного значения (сброс списка если input: empty)
        загрузка списка выбора  (если input: !empty)
           - установка значения если полученное имеется в списке set: value, emit: not
           - если значение не найдено (или оно empty) set: null, emit: null (или пустой объект)
2. При смене значения
    - входное значение !object: очиска списка выбора, set: null, emit: null (или пустой объект)
    - входное значение object. Аналогично как при инициализации

Примечание: emit значения происходит только при смене ключа сущности
